name: Reusable workflow for docker images

on:
  workflow_call:
    inputs:
      docker_org:
        required: true
        type: string
      docker_image:
        required: true
        type: string
      docker_file:
        required: true
        type: string
    secrets:
      dockerhub_username:
        required: true
      dockerhub_token:
        required: true

env:
  VERSION: 0.11.1

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create docker tags
        id: get_tags
        run: |
          echo "version_tag=${{ inputs.docker_org }}/${{ inputs.docker_image }}:${{ env.VERSION }}" >> $GITHUB_OUTPUT

      - name: Build the Docker image
        run: |
          docker build -t ${{ steps.get_tags.outputs.version_tag }} -f ${{ inputs.docker_file }} .

  publish:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Check if we have a valid *-next version for merges on main
      - name: Check version (only for push events)
        if: github.event_name == 'push'
        id: version_check
        run: |
          if [[ $VERSION == *"-next" ]]; then
            echo "is_next_version=true" >> $GITHUB_OUTPUT
          else
            echo "is_next_version=false" >> $GITHUB_OUTPUT
          fi

      # Create tags according to the state to be published:
      # - next version on main merge: create `*-next` and `*-next.<git_sha>` tags
      # - release version: create version, `*-next` and `latest` tags
      - name: Create docker tags
        id: get_tags
        if: github.event_name == 'push' && steps.version_check.outputs.is_next_version == 'true' || github.event_name == 'release'
        run: |
          if [[ $GITHUB_EVENT_NAME == 'push' ]]; then
            echo "sha_tag=${{ inputs.docker_org }}/${{ inputs.docker_image }}:${{ env.VERSION }}.$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_OUTPUT
            echo "version_tag=${{ inputs.docker_org }}/${{ inputs.docker_image }}:${{ env.VERSION }}" >> $GITHUB_OUTPUT
          else
            echo "version_tag=${{ inputs.docker_org }}/${{ inputs.docker_image }}:${{ env.VERSION }}" >> $GITHUB_OUTPUT
            echo "next_tag=${{ inputs.docker_org }}/${{ inputs.docker_image }}:${{ env.VERSION }}-next" >> $GITHUB_OUTPUT
            echo "latest_tag=${{ inputs.docker_org }}/${{ inputs.docker_image }}:latest" >> $GITHUB_OUTPUT
          fi

      # Only build when we will publish, so either a main merge with next-version or a release
      - name: Build Docker image
        if: github.event_name == 'push' && steps.version_check.outputs.is_next_version == 'true' || github.event_name == 'release'
        run: docker build -t ${{ steps.get_tags.outputs.version_tag }} -f ${{ inputs.docker_file }} .

      # Only log in to dockerhub when we will publish, so either a main merge with next-version or a release
      - name: Login to DockerHub
        if: github.event_name == 'push' && steps.version_check.outputs.is_next_version == 'true' || github.event_name == 'release'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.dockerhub_username }}
          password: ${{ secrets.dockerhub_token }}

      # Push for main merges with next version
      - name: Push Docker tags (for push events with next version)
        if: github.event_name == 'push' && steps.version_check.outputs.is_next_version == 'true'
        run: |
          docker push ${{ steps.get_tags.outputs.version_tag }}
          docker tag ${{ steps.get_tags.outputs.version_tag }} ${{ steps.get_tags.outputs.sha_tag }}
          docker push ${{ steps.get_tags.outputs.sha_tag }}

      # Push for releases
      - name: Push Docker tags (for release events)
        if: github.event_name == 'release'
        run: |
          docker push ${{ steps.get_tags.outputs.version_tag }}
          docker tag ${{ steps.get_tags.outputs.version_tag }} ${{ steps.get_tags.outputs.latest_tag }}
          docker push ${{ steps.get_tags.outputs.latest_tag }}
          docker tag ${{ steps.get_tags.outputs.version_tag }} ${{ steps.get_tags.outputs.next_tag }}
          docker push ${{ steps.get_tags.outputs.next_tag }}
