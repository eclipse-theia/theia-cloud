name: Reusable workflow for docker images

on:
  workflow_call:
    inputs:
      docker_org:
        required: true
        type: string
      docker_image:
        required: true
        type: string
      docker_file:
        required: true
        type: string
      platforms:
        required: false
        type: string
        default: "linux/amd64,linux/arm64"
    secrets:
      dockerhub_username:
        required: true
      dockerhub_token:
        required: true

env:
  VERSION: 1.1.0-next

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create docker tags
        id: get_tags
        run: |
          echo "version_tag=${{ inputs.docker_org }}/${{ inputs.docker_image }}:${{ env.VERSION }}" >> $GITHUB_OUTPUT

      - name: Build the Docker image
        run: |
          docker build -t ${{ steps.get_tags.outputs.version_tag }} -f ${{ inputs.docker_file }} .

  publish:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Check if we have a valid *-next version for merges on main
      - name: Check version (only for push events)
        if: github.event_name == 'push'
        id: version_check
        run: |
          if [[ $VERSION == *"-next" ]]; then
            echo "is_next_version=true" >> $GITHUB_OUTPUT
          else
            echo "is_next_version=false" >> $GITHUB_OUTPUT
          fi

      # Create tags according to the state to be published:
      # - next version on main merge: create `*-next` and `*-next.<git_sha>` tags
      # - release version: create version, `*-next` and `latest` tags
      - name: Create docker tags
        id: get_tags
        if: github.event_name == 'push' && steps.version_check.outputs.is_next_version == 'true' || github.event_name == 'release'
        run: |
          if [[ $GITHUB_EVENT_NAME == 'push' ]]; then
            echo "sha_tag=${{ inputs.docker_org }}/${{ inputs.docker_image }}:${{ env.VERSION }}.$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_OUTPUT
            echo "version_tag=${{ inputs.docker_org }}/${{ inputs.docker_image }}:${{ env.VERSION }}" >> $GITHUB_OUTPUT
          else
            echo "version_tag=${{ inputs.docker_org }}/${{ inputs.docker_image }}:${{ env.VERSION }}" >> $GITHUB_OUTPUT
            echo "next_tag=${{ inputs.docker_org }}/${{ inputs.docker_image }}:${{ env.VERSION }}-next" >> $GITHUB_OUTPUT
            echo "latest_tag=${{ inputs.docker_org }}/${{ inputs.docker_image }}:latest" >> $GITHUB_OUTPUT
          fi

      # Set up QEMU for multi-architecture builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0

      # Set up Docker Buildx for multi-architecture builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1
        with:
          install: true
          driver: docker-container
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      # List available platforms
      - name: List docker buildx available platforms
        run: docker buildx inspect --bootstrap

      # Only log in to dockerhub when we will publish, so either a main merge with next-version or a release
      - name: Login to DockerHub
        if: github.event_name == 'push' && steps.version_check.outputs.is_next_version == 'true' || github.event_name == 'release'
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          username: ${{ secrets.dockerhub_username }}
          password: ${{ secrets.dockerhub_token }}

      # Build and push for main merges with next version
      - name: Build and push Docker tags (for push events with next version)
        if: github.event_name == 'push' && steps.version_check.outputs.is_next_version == 'true'
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 # v6.10.0
        with:
          context: .
          file: ${{ inputs.docker_file }}
          push: true
          tags: |
            ${{ steps.get_tags.outputs.version_tag }}
            ${{ steps.get_tags.outputs.sha_tag }}
          platforms: ${{ inputs.platforms }}

      # Build and push for releases
      - name: Build and push Docker tags (for release events)
        if: github.event_name == 'release'
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 # v6.10.0
        with:
          context: .
          file: ${{ inputs.docker_file }}
          push: true
          tags: |
            ${{ steps.get_tags.outputs.version_tag }}
            ${{ steps.get_tags.outputs.latest_tag }}
            ${{ steps.get_tags.outputs.next_tag }}
          platforms: ${{ inputs.platforms }}
