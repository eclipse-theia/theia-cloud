/* tslint:disable */
/* eslint-disable */
/**
 * Theia.cloud API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {
    SessionActivityRequest,
    SessionLaunchResponse,
    SessionSpec,
    SessionStartRequest,
    SessionStopRequest
} from '../models';
import {
    SessionActivityRequestToJSON,
    SessionLaunchResponseFromJSON, SessionSpecFromJSON, SessionStartRequestToJSON, SessionStopRequestToJSON
} from '../models';
import * as runtime from '../runtime';

export interface ServiceSessionAppIdUserGetRequest {
    appId: string;
    user: string;
}

export interface ServiceSessionDeleteRequest {
    sessionStopRequest?: SessionStopRequest;
}

export interface ServiceSessionPatchRequest {
    sessionActivityRequest?: SessionActivityRequest;
}

export interface ServiceSessionPostRequest {
    sessionStartRequest?: SessionStartRequest;
}

/**
 * 
 */
export class SessionResourceApi extends runtime.BaseAPI {

    /**
     * List sessions of a user.
     * List sessions
     */
    async serviceSessionAppIdUserGetRaw(requestParameters: ServiceSessionAppIdUserGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SessionSpec>>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling serviceSessionAppIdUserGet.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling serviceSessionAppIdUserGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/service/session/{appId}/{user}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SessionSpecFromJSON));
    }

    /**
     * List sessions of a user.
     * List sessions
     */
    async serviceSessionAppIdUserGet(requestParameters: ServiceSessionAppIdUserGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SessionSpec>> {
        const response = await this.serviceSessionAppIdUserGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stops a session.
     * Stop session
     */
    async serviceSessionDeleteRaw(requestParameters: ServiceSessionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/service/session`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: SessionStopRequestToJSON(requestParameters.sessionStopRequest),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Stops a session.
     * Stop session
     */
    async serviceSessionDelete(requestParameters: ServiceSessionDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.serviceSessionDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the last activity timestamp for a session to monitor activity.
     * Report session activity
     */
    async serviceSessionPatchRaw(requestParameters: ServiceSessionPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/service/session`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SessionActivityRequestToJSON(requestParameters.sessionActivityRequest),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Updates the last activity timestamp for a session to monitor activity.
     * Report session activity
     */
    async serviceSessionPatch(requestParameters: ServiceSessionPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.serviceSessionPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Starts a new session for an existing workspace.
     * Start a new session
     */
    async serviceSessionPostRaw(requestParameters: ServiceSessionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SessionLaunchResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/service/session`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SessionStartRequestToJSON(requestParameters.sessionStartRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionLaunchResponseFromJSON(jsonValue));
    }

    /**
     * Starts a new session for an existing workspace.
     * Start a new session
     */
    async serviceSessionPost(requestParameters: ServiceSessionPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SessionLaunchResponse> {
        const response = await this.serviceSessionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
