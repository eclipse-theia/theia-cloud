/* tslint:disable */
/* eslint-disable */
/**
 * Theia.cloud API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {
    LaunchRequest,
    SessionLaunchResponse
} from '../models';
import {
    LaunchRequestToJSON,
    SessionLaunchResponseFromJSON
} from '../models';
import * as runtime from '../runtime';

export interface ServiceAppIdGetRequest {
    appId: string;
}

export interface ServicePostRequest {
    launchRequest?: LaunchRequest;
}

/**
 * 
 */
export class RootResourceApi extends runtime.BaseAPI {

    /**
     * Replies if the service is available.
     * Ping
     */
    async serviceAppIdGetRaw(requestParameters: ServiceAppIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling serviceAppIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/service/{appId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Replies if the service is available.
     * Ping
     */
    async serviceAppIdGet(requestParameters: ServiceAppIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.serviceAppIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Launches a session and creates a workspace if required.
     * Launch Session
     */
    async servicePostRaw(requestParameters: ServicePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SessionLaunchResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/service`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LaunchRequestToJSON(requestParameters.launchRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionLaunchResponseFromJSON(jsonValue));
    }

    /**
     * Launches a session and creates a workspace if required.
     * Launch Session
     */
    async servicePost(requestParameters: ServicePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SessionLaunchResponse> {
        const response = await this.servicePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
