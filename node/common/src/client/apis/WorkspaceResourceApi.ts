/* tslint:disable */
/* eslint-disable */
/**
 * Theia.cloud API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {
    UserWorkspace,
    WorkspaceCreationRequest,
    WorkspaceCreationResponse,
    WorkspaceDeletionRequest
} from '../models';
import {
    UserWorkspaceFromJSON, WorkspaceCreationRequestToJSON,
    WorkspaceCreationResponseFromJSON, WorkspaceDeletionRequestToJSON
} from '../models';
import * as runtime from '../runtime';

export interface ServiceWorkspaceAppIdUserGetRequest {
    appId: string;
    user: string;
}

export interface ServiceWorkspaceDeleteRequest {
    workspaceDeletionRequest?: WorkspaceDeletionRequest;
}

export interface ServiceWorkspacePostRequest {
    workspaceCreationRequest?: WorkspaceCreationRequest;
}

/**
 * 
 */
export class WorkspaceResourceApi extends runtime.BaseAPI {

    /**
     * Lists the workspaces of a user.
     * List workspaces
     */
    async serviceWorkspaceAppIdUserGetRaw(requestParameters: ServiceWorkspaceAppIdUserGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserWorkspace>>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling serviceWorkspaceAppIdUserGet.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling serviceWorkspaceAppIdUserGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/service/workspace/{appId}/{user}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserWorkspaceFromJSON));
    }

    /**
     * Lists the workspaces of a user.
     * List workspaces
     */
    async serviceWorkspaceAppIdUserGet(requestParameters: ServiceWorkspaceAppIdUserGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserWorkspace>> {
        const response = await this.serviceWorkspaceAppIdUserGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a workspace.
     * Delete workspace
     */
    async serviceWorkspaceDeleteRaw(requestParameters: ServiceWorkspaceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/service/workspace`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: WorkspaceDeletionRequestToJSON(requestParameters.workspaceDeletionRequest),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Deletes a workspace.
     * Delete workspace
     */
    async serviceWorkspaceDelete(requestParameters: ServiceWorkspaceDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.serviceWorkspaceDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new workspace for a user.
     * Create workspace
     */
    async serviceWorkspacePostRaw(requestParameters: ServiceWorkspacePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceCreationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/service/workspace`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkspaceCreationRequestToJSON(requestParameters.workspaceCreationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceCreationResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new workspace for a user.
     * Create workspace
     */
    async serviceWorkspacePost(requestParameters: ServiceWorkspacePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceCreationResponse> {
        const response = await this.serviceWorkspacePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
