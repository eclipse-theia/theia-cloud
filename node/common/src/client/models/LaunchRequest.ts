/* tslint:disable */
/* eslint-disable */
/**
 * Theia.cloud API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime';
/**
 * A request to launch a new session.
 * @export
 * @interface LaunchRequest
 */
export interface LaunchRequest {
    /**
     * The App Id of this Theia.cloud instance. Request without a matching Id will be denied.
     * @type {string}
     * @memberof LaunchRequest
     */
    appId: string;
    /**
     * The user identification, usually the email address.
     * @type {string}
     * @memberof LaunchRequest
     */
    user: string;
    /**
     * The app to launch. Needs to be set if a new or ephemeral session should be launched. For an existing workspace the last app definition will be used if none is given.
     * @type {string}
     * @memberof LaunchRequest
     */
    appDefinition?: string;
    /**
     * The name of the workspace to mount/create. Needs to be set if an existing workspace should be launched.
     * @type {string}
     * @memberof LaunchRequest
     */
    workspaceName?: string;
    /**
     * The label of the workspace to mount/create. If no label is given, a default label will be generated.
     * @type {string}
     * @memberof LaunchRequest
     */
    label?: string;
    /**
     * If true no workspace will be created for the session.
     * @type {boolean}
     * @memberof LaunchRequest
     */
    ephemeral?: boolean;
    /**
     * Number of minutes to wait for session launch. Default is 3 Minutes.
     * @type {number}
     * @memberof LaunchRequest
     */
    timeout?: number;
}

/**
 * Check if a given object implements the LaunchRequest interface.
 */
export function instanceOfLaunchRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "appId" in value;
    isInstance = isInstance && "user" in value;

    return isInstance;
}

export function LaunchRequestFromJSON(json: any): LaunchRequest {
    return LaunchRequestFromJSONTyped(json, false);
}

export function LaunchRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): LaunchRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'appId': json['appId'],
        'user': json['user'],
        'appDefinition': !exists(json, 'appDefinition') ? undefined : json['appDefinition'],
        'workspaceName': !exists(json, 'workspaceName') ? undefined : json['workspaceName'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'ephemeral': !exists(json, 'ephemeral') ? undefined : json['ephemeral'],
        'timeout': !exists(json, 'timeout') ? undefined : json['timeout'],
    };
}

export function LaunchRequestToJSON(value?: LaunchRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'appId': value.appId,
        'user': value.user,
        'appDefinition': value.appDefinition,
        'workspaceName': value.workspaceName,
        'label': value.label,
        'ephemeral': value.ephemeral,
        'timeout': value.timeout,
    };
}

